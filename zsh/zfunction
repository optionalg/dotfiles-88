#------------------------------------------------------------------------------#
# vi: set sw=4 ts=4 ai:                            ("set modeline" in ~/.exrc) #
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
# $Id:: zfunction 18 2012-07-24 08:32:17 tonk                               $: #
# $Revision:: 18                                                            $: #
# $Author:: Ton Kersten <Github@TonKersten.com>                             $: #
# $Date:: 2012-07-24 08:32:58 +0200 (Tue, 24 Jul 2012)                      $: #
#------------------------------------------------------------------------------#

set -U path
set -U manpath
pathmunge()
{
	# If the path doesn't exist, return
	[[ ! -d "${1}" ]] && return

	# Add the path
	if [[ "${2}" = "after" ]]
	then
		path=(${path} "${1}")
	else
		path=("${1}" ${path})
	fi
}


manpathmunge()
{
	# If the path doesn't exist, return
	[[ ! -d "${1}" ]] && return

	# Add the manpath
	if [[ "${2}" = "after" ]]
	then
		manpath=(${manpath} "${1}")
	else
		manpath=("${1}" ${manpath})
	fi
}


f()
{
	if [[ ! -f ${1} ]]
	then
		return 1
	fi

	copy=$(mktemp ${TMPPREFIX:-/tmp/shell}.XXXXXXX)
	if cp ${1} ${copy}
	then
		if ${EDTIOR:-vi} ${copy}
		then
			${SHELL} ${copy}

			# add to hist and remove
			fc -R ${copy}
			rm -f ${copy}
		fi
	else
		return 1
	fi
}


dpkghold()
{
	if [[ ${1} = "" ]]
	then
		return
	fi

	echo "${1}" hold | sudo dpkg --set-selections
}


dpkginstall()
{
	if [[ ${1} = "" ]]
	then
		return
	fi
	echo "${1}" install | sudo dpkg --set-selections
}


svcd()
{
	echo ffmpeg -i ${1} -target pal-svcd ${1}:r.mpeg
	ffmpeg -i ${1} -target pal-svcd ${1}:r.mpeg
}


pdftex()
{
	pdflatex ${1} && rm -f ${1}:r.log
}


zhist()
{
	zmodload -i zsh/datetime

	typeset -R4 elaps
	typeset -L19 datim
	typeset -R4 -i tel=0

	NUM=0
	[[ x"${1:-}" = x"-n" ]] && NUM=1

	cat ~/.zsh/zhistory | while read dummy rest
	do
		tel=$(( ${tel} + 1 ))
		epoch=${rest%%:*}
		comm=${rest##*;}
		elaps=${rest%%;*}
		elaps=${elaps##*:}
		datim="$(strftime "%Y-%m-%d %T" ${epoch})"
		if [[ ${NUM} = 1 ]]
		then
			echo "${tel}) ${elaps} ${datim} - ${comm}"
		else
			echo "${elaps} ${datim} - ${comm}"
		fi
	done
}


psa()
{
	if [ ${#} = 0 ]
	then
		ps ${PS} | less
	else
		ps ${PS} | awk 'NR == 1 { print } /'${*}'/ && ! /awk NR == 1/ { print }' | less
	fi
}


l()
{
	ls -alFh "${@}" | less -E
}


precmd()
{
	# First rehash the commands
	rehash

	# Now check if there's new mail
	if [[ -d ${HOME}/Maildir/new ]]
	then
		MSG=$(ls ${HOME}/Maildir/new | grep -vc "^total ")
		MSG=${MSG// /}

		if [[ ${MSG} != 0 ]]
		then
			tput bold
			if [[ ${MSG} = 1 ]]
			then
				echo "You have got ${MSG} new mail message."
			else
				echo "You have got ${MSG} new mail messages."
			fi
			tput sgr0
		fi
	fi

	if [[ ( ${-} = *i* ) && ( $TERM == screen* ) ]]
	then
		printf "\ek$(hostname -s)\e\\"
	fi
}


update_git_vars()
{
	unset __CURRENT_GIT_BRANCH
	unset __CURRENT_GIT_BRANCH_STATUS
	unset __CURRENT_GIT_BRANCH_IS_DIRTY

	local st="$(git status 2>/dev/null)"
	if [[ -n "$st" ]]; then
		local -a arr
		arr=(${(f)st})

		if [[ $arr[1] = *Not\ currently\ on\ any\ branch.* ]]
		then
			__CURRENT_GIT_BRANCH='no-branch'
		else
			__CURRENT_GIT_BRANCH="${arr[1][(w)4]}"
		fi

		if [[ $arr[2] = *Your\ branch\ is* ]]
		then
			if [[ $arr[2] = *ahead* ]]
			then
				__CURRENT_GIT_BRANCH_STATUS='ahead'
			elif [[ $arr[2] = *diverged* ]]
			then
				__CURRENT_GIT_BRANCH_STATUS=*diverged*
			else
				__CURRENT_GIT_BRANCH_STATUS=*behind*
			fi
		fi

		if [[ $st = *nothing\ to\ commit* ]]
		then
			__CURRENT_GIT_BRANCH_IS_DIRTY='0'
		else
			__CURRENT_GIT_BRANCH_IS_DIRTY='1'
		fi
	fi
}


prompt_git_info()
{
	update_git_vars

	if [[ -n "$__CURRENT_GIT_BRANCH" ]]
	then
		local s="("
		s+="$__CURRENT_GIT_BRANCH"
		case "$__CURRENT_GIT_BRANCH_STATUS"
		in
			ahead)		s+="↑"	;;
			diverged)	s+="↕"	;;
			behind)		s+="↓"	;;
		esac
		if [[ "$__CURRENT_GIT_BRANCH_IS_DIRTY" = "1" ]]
		then
			s+="⚡"
		fi
		s+=")"

		printf " %s%s" "%{${fg[yellow]}%}" $s
	fi
}

chpwd()
{
	# Set the initial umask
	case "${PWD}/"
	in
		/etc/puppet/*)
			[[ ${UMSAVE} = 0 ]] &&
			{	um=$(umask)
				UMSAVE=1
			}
			umask 007
			;;
		*)
			UMSAVE=0
			[[ x"${um}" != x"" ]] && umask ${um}
			;;
	esac
}


fm()
{
	[[ -d ~/Maildir ]] &&
	{	if [[ $(ls -l ~/Maildir/new | grep -vc '^total ') != 0 ]]
		then
			grep -m 1 -h '^Subject:' ~/Maildir/new/*	| \
								sed 's/^Subject: //'	| \
								tail -n10				| \
								sed 's/  */ /g'
		else
			echo "No new mail"
		fi
	}
}
