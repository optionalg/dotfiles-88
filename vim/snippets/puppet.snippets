# Snippets for use with VIM and http://www.vim.org/scripts/script.php?script_id=2540
#
# Based on the Puppet Snippets of R.I.Pienaar <rip@devco.net>.
# Added a lot for my own

# Header to match http://docs.puppetlabs.com/guides/style_guide.html#puppet-doc
snippet classheader
	# $Id$
	# $URL$
	# vi: set sw=4 ts=4 ai:
	#
	# Class  : ${1:`vim_snippets#Filename(expand('%:p:s?.*modules/??:h:h'), 'name')`}
	# Author : `g:snips_author`
	# Email  : `g:snips_email`
	# Date   : `strftime("%Y-%m-%d")`
	#
	class $1 (${3}) {
		${4}
	}
snippet defheader
	# == Define: ${1:`vim_snippets#Filename(expand('%:p:s?.*modules/??:r:s?/manifests/?::?'), 'name')`}
	#
	# ${2:Full description of defined resource type $1 here}
	#
	# === Parameters
	#
	# Document parameters here
	#
	# [*namevar*]
	#   If there is a parameter that defaults to the value of the title string
	#   when not explicitly set, you must always say so.  This parameter can be
	#   referred to as a "namevar," since it's functionally equivalent to the
	#   namevar of a core resource type.
	#
	# [*basedir*]
	#   Description of this variable.  For example, "This parameter sets the
	#   base directory for this resource type.  It should not contain a trailing
	#   slash."
	#
	# === Examples
	#
	# Provide some examples on how to use this type:
	#
	#   $1 { 'namevar':
	#     basedir => '/tmp/src',
	#   }
	#
	# === Authors
	#
	# `g:snips_author` <`g:snips_email`>
	#
	# === Copyright
	#
	# Copyright `strftime("%Y")` `g:snips_author`
	#
	define $1(${3}) {
		${4}
	}

# Language Constructs
snippet class
	class ${1:`vim_snippets#Filename('', 'name')`} {
		${0}
	}
snippet node
	node "${1:`vim_snippets#Filename('', 'fqdn')`}" {
		${0}
	}
snippet case
	case $${1:variable} {
		default : { ${0}
		}
	}
snippet ife
	if $${1:variable} {
		${2}
	} else {
		${0}
	}
snippet if
	if $${1:variable} {
		${0}
	}
snippet el
	else {
		${0}
	}
snippet ?
	? {
		'${1}' => ${0}
	  }
#
# blocks etc and general syntax sugar
snippet [
	[ ${1} ]
snippet >
	${1} => ${0}
snippet p:
	"puppet:///modules/${module_name}/${0:file name}",
snippet case_osfamily
	case $::osfamily {
		'RedHat'  : {
		}

		'Debian'  : {
		}

		'Suse'  : {
		}

		'Gentoo'  : {
		}

		'Archlinux'  : {
		}

		'FreeBSD' : {
		}

		'Solaris' : {
		}

		default   : {
			fail("Module '${module_name}': ${::osfamily} v ${::lsbmajdistrelease} not supported!")
		}
	}

snippet case_osfamily_wheel
	case $::osfamily {
		'FreeBSD' : {
			$config_group = 'wheel'
		}

		default   : {
			$config_group = 'root'
		}
	}

snippet case_operatingsystem
	case $::operatingsystem {
		'RedHat'      : {
		}

		'CentOS'      : {
		}

		'Fedora'      : {
		}

		'Scientific'  : {
		}

		'OracleLinux' : {
		}

		'Debian'      : {
		}

		'Ubuntu'      : {
		}

		'SLES'        : {
		}

		'SLED'        : {
		}

		'OpenSuSE'    : {
		}

		'SuSE'        : {
		}

		'Gentoo'      : {
		}

		'Archlinux'   : {
		}

		'FreeBSD'     : {
		}

		'Solaris'     : {
		}

		'Nexenta'     : {
		}

		'OpenIndiana' : {
		}

		default   : {
			fail("Module '${module_name}': ${::operatingsystem} v ${::lsbmajdistrelease} not supported!")
		}
	}

snippet case_lsbdistcodename_ubuntu
	case $::lsbdistcodename
		'lucid'   : {
		}

		'precise' : {
		}

		default   : {
			fail("Module '${module_name}': ${::operatingsystem} v ${::lsbdistcodename} not supported!")
		}
	}

snippet case_lsbmajdistrelease_redhat
	case $::lsbmajdistrelease
		'5'   : {
		}

		'6' : {
		}

		default   : {
			fail("Module '${module_name}': ${::operatingsystem} v ${::lsbmajdistrelease} not supported!")
		}
	}

snippet nagios
	# Nagios / Icinga Service config
	@@nagios_service { "check_${1:name}_${::fqdn}" :
		check_command         => "check_nrpe_command!-H ${::fqdn}!-c check_${2:$1}!-a ${3:parameters}",
		service_description   => "${4:Description} ${::fqdn}",
		host_name             => $::fqdn,
		max_check_attempts    => $::icinga::max_check_attempts,
		notification_period   => $::icinga::notification_period,
		notifications_enabled => $::icinga::notifications_enabled,
		target                => "${::icinga::targetdir}/services/${::fqdn}.cfg",
	}

snippet notify
	notify {'${1:Notify message}' : }
#
# Functions
snippet alert
	alert("${1:message}")
snippet crit
	crit("${1:message}")
snippet debug
	debug("${1:message}")
snippet defined
	defined(${1:Resource}["${2:name}"])
snippet emerg
	emerg("${1:message}")
snippet extlookup Simple extlookup
	extlookup("${1:variable}")
snippet extlookup Extlookup with defaults
	extlookup("${1:variable}", "${2:default}")
snippet extlookup Extlookup with defaults and custom data file
	extlookup("${1:variable}", "${2:default}", "${3:data source}")
snippet hiera
	hiera('${1:variable}', '')
snippet hiera_array
	hiera_array('${1:variable}', '')
snippet hiera_hash
	hiera_hash('${1:variable}', '')
snippet fail
	fail("${1:message}")
snippet info
	info("${1:message}")
snippet inline_template
	inline_template("<%= ${1} %>")
snippet notice
	notice("${1:message}")
snippet realize
	realize(${1:Resource}[${2:name}])
snippet regsubst
	regsubst(${1:hay stack}, ${2:needle}, "${3:replacement}")
snippet inc
	include ${1:classname}
snippet split
	split(${1:hay stack}, "${2:patten}")
snippet versioncmp
	versioncmp("${1:version}", "${2:version}")
snippet warning
	warning("${1:message}")
#
# Types
snippet cron
	cron { '${1:name}' :
		ensure  => ${0:present},
		command => '${2}',
		user    => '${3:root}',
		hour    => '${4:0}',
		minute  => '${5:0}',
		${6}    => ${0},
	}

snippet exec
	exec { '${1:name}' :
		command => '${2:$1}',
		user    => '${3:root}',
		${4}    => ${0},
	}

snippet user
	user { '${1:user}' :
		ensure     => ${0:present},
		comment    => '${2:$1}',
		home       => '${0:/home/$1}',
		managehome => ${0:false},
		uid        => '${3:1xxx}',
		gid        => '${4:$3}',
		shell      => '${0:/bin/bash}',
		${5}       => ${0},
		require    => Group['${1}'],
	}

snippet group
	group { '${1:group}' :
		ensure => ${0:present},
		gid    => '${4}',
	}

snippet host
	host { '${1:hostname}' :
		ensure => ${0:present},
		ip     => ${0:127.0.0.1},
	}

snippet mailalias
	mailalias { '${1:localpart}' :
		ensure    => ${0:present},
		recipient => '${0:recipient}',
	}

snippet mount
	mount { '${1:destination path}' :
		ensure => ${2:mounted},
		device => '${0:device name or path}',
	}

snippet package
	package { '${1:package name}' :
		ensure => ${2:installed},
	}

snippet yumrepo
	yumrepo { '${1:repo name}' :
		descr   => '${2:$1}',
		enabled => ${0:true},
	}

snippet define
	define ${1} (${2}) {
		${0},
	}

snippet service
	service { '${1:service}' :
		ensure     => ${2:running},
		enable     => ${3:true},
		hasrestart => ${0:true},
		hasstatus  => ${0:true},
	}

snippet file
	file { '${1:path}' :
		ensure => ${0:present},
		source => "puppet:///modules/${module_name}/${2:file name}",
		owner  => ${3:root},
		group  => ${4:root},
		mode   => '${5:0644}',
	}

snippet stages
	# Define run stages
	stage { 'pre'  : }
	stage { 'post' : }
	Stage['pre']
		-> Stage['main']
		-> Stage['post']

